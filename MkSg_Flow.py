# Autogenerated with SMOP 0.32-7-gcce8558
from smop.core import *


# MkSg_Flow.m


@function
def MkSg_Flow(flowName=None, N=None, L=None, s0=None, params=None, eta=None, *args, **kwargs):
    varargin = MkSg_Flow.varargin
    nargin = MkSg_Flow.nargin

    # Returns a time series obtained from a given flow
    # Output is a signal, s, that has as each column an output from a co-ordinate
    # of the specified flow
    # -------------------------------------------------------------------------------

    ## Set broad defaults
    if nargin < 1 or isempty(flowName):
        flowName = 'Lorenz'

    if nargin < 5:
        params = matlabarray([])

    if nargin < 6 or isempty(eta):
        eta = 500

    # Set evaluation/sensitivity options
    opts = odeset('reltol', 10 ** - 6, 'abstol', 10 ** - 6)
    # Set other defaults for each specific case

    # Specify the ode (as ode), points (as N), length scale (as L) and initial conditions (as s0) for each case
    if 'Lorenz' == flowName:
        ## Lorenz Attractor
        # Sprott Autonomous Dissipative Flows
        if nargin < 2 or isempty(N):
            N = 1000
        if nargin < 3 or isempty(L):
            L = round(N / 5)
        if nargin < 4 or isempty(s0):
            s0 = matlabarray(cat([0], [- 0.01], [20]))
        ode = lambda t=None, y=None: F_lorenz(t, y, params)

    elif 'Rossler' == flowName:
        ## Rssler Attractor
        # Sprott Autonomous Dissipative Flows
        if nargin < 2 or isempty(N):
            N = 1000
        if nargin < 3 or isempty(L):
            L = round(N / 5)
        if nargin < 4 or isempty(s0):
            s0 = matlabarray(cat([- 9], [0], [0]))
        ode = lambda t=None, y=None: F_rossler(t, y, params)

    elif 'DiffnLorenz' == flowName:
        ## Diffusionless Lorenz Attractor
        # Sprott Autonomous Dissipative Flows
        if nargin < 2 or isempty(N):
            N = 1000
        if nargin < 3 or isempty(L):
            L = round(N / 5)
        if nargin < 4 or isempty(s0):
            s0 = matlabarray(cat([0], [- 0.01], [20]))
        ode = lambda t=None, y=None: F_diffnlorenz(t, y, params)

    elif 'ComplexButterfly' == flowName:
        ## Complex Butterfly
        # Sprott Autonomous Dissipative Flows
        if nargin < 2 or isempty(N):
            N = 5000
        if nargin < 3 or isempty(L):
            L = round(N / 2)
        if nargin < 4 or isempty(s0):
            s0 = matlabarray(cat([0.2], [0], [0]))
        ode = lambda t=None, y=None: F_complxbutfly(t, y, params)

    elif 'Chen' == flowName:
        ## Chen's System
        # Sprott Autonomous Dissipative Flows
        if nargin < 2 or isempty(N):
            N = 1000
        if nargin < 3 or isempty(L):
            L = round(N / 4)
        if nargin < 4 or isempty(s0):
            s0 = matlabarray(cat([- 10], [0], [37]))
        ode = lambda t=None, y=None: F_chen(t, y, params)

    elif 'Hadley' == flowName:
        ## Hadley circulation
        # Sprott Autonomous Dissipative Flows
        if nargin < 2 or isempty(N):
            N = 1000
        if nargin < 3 or isempty(L):
            L = round(N / 100)
        if nargin < 4 or isempty(s0):
            s0 = matlabarray(cat([0], [0], [1.3]))
        ode = lambda t=None, y=None: F_hadley(t, y, params)

    elif 'ACT' == flowName:
        ## ACT attractor
        # Sprott Autonomous Dissipative Flows
        if nargin < 2 or isempty(N):
            N = 1000
        if nargin < 3 or isempty(L):
            L = round(N / 10)
        if nargin < 4 or isempty(s0):
            s0 = matlabarray(cat([0.5], [0], [0]))
        ode = lambda t=None, y=None: F_ACT(t, y, params)

    elif 'RabFab' == flowName:
        ## Rabinovich-Fabrikant attactor
        # Sprott Autonomous Dissipative Flows
        if nargin < 2 or isempty(N):
            N = 1000
        if nargin < 3 or isempty(L):
            L = round(N / 10)
        if nargin < 4 or isempty(s0):
            s0 = matlabarray(cat([- 1], [0], [0.5]))
        ode = lambda t=None, y=None: F_rabfab(t, y, params)

    elif 'lfrbms' == flowName:
        ## Linear feedback rigid body motion system (faulty)
        # Sprott Autonomous Dissipative Flows
        if nargin < 2 or isempty(N):
            N = 1000
        if nargin < 3 or isempty(L):
            L = round(N / 5)
        if nargin < 4 or isempty(s0):
            s0 = matlabarray(cat([0.6], [0], [0]))
        ode = lambda t=None, y=None: F_lfrbms(t, y, params)

    # ------Can't get it to work----------
    elif 'Chua' == flowName:
        ## Chua's circuit
        # Sprott Autonomous Dissipative Flows
        if nargin < 2 or isempty(N):
            N = 1000
        if nargin < 3 or isempty(L):
            L = round(N / 5)
        if nargin < 4 or isempty(s0):
            s0 = matlabarray(cat([0], [0], [0.6]))
        ode = lambda t=None, y=None: F_chua(t, y, params)

    elif 'MooreSpiegel' == flowName:
        ## Moore-Spiegel oscillator
        # Sprott Autonomous Dissipative Flows
        if nargin < 2 or isempty(N):
            N = 1000
        if nargin < 3 or isempty(L):
            L = round(N / 10)
        if nargin < 4 or isempty(s0):
            s0 = matlabarray(cat([0.1], [0], [0]))
        ode = lambda t=None, y=None: F_moorespiegel(t, y, params)

    elif 'thomascsa' == flowName:
        ## Thomas' cyclically symmetric attractor
        # Sprott Autonomous Dissipative Flows
        if nargin < 2 or isempty(N):
            N = 1000
        if nargin < 3 or isempty(L):
            L = round(N / 2)
        if nargin < 4 or isempty(s0):
            s0 = matlabarray(cat([0.1], [0], [0]))
        ode = lambda t=None, y=None: F_thomascsa(t, y, params)

    elif'halvorsencsa' == flowName:
        ## Halvorsen's cyclically symmetric attractor
        # Sprott Autonomous Dissipative Flows
        if nargin < 2 or isempty(N):
            N = 1000
        if nargin < 3 or isempty(L):
            L = round(N / 10)
        if nargin < 4 or isempty(s0):
            s0 = matlabarray(cat([- 5], [0], [0]))
        ode = lambda t=None, y=None: F_halvorsencsa(t, y, params)

    elif 'BurkeShaw' == flowName:
        ## Burke-Shaw attractor (doesn't work)
        # Sprott Autonomous Dissipative Flows
        if nargin < 2 or isempty(N):
            N = 1000
        if nargin < 3 or isempty(L):
            L = round(N / 5)
        if nargin < 4 or isempty(s0):
            s0 = matlabarray(cat([0.6], [0], [0]))
        ode = lambda t=None, y=None: F_burkeshaw(t, y, params)

    # ------- Can't get it to work -----------
    elif 'Rucklidge' == flowName:
        ## Rucklidge attractor
        # Sprott Autonomous Dissipative Flows
        if nargin < 2 or isempty(N):
            N = 1000
        if nargin < 3 or isempty(L):
            L = round(N / 10)
        if nargin < 4 or isempty(s0):
            s0 = matlabarray(cat([1], [0], [4.5]))
        ode = lambda t=None, y=None: F_rucklidge(t, y, params)

    elif 'windmi' == flowName:
        ## WINDMI attractor
        # Sprott Autonomous Dissipative Flows
        if nargin < 2 or isempty(N):
            N = 1000
        if nargin < 3 or isempty(L):
            L = round(N / 2)
        if nargin < 4 or isempty(s0):
            s0 = matlabarray(cat([0], [0.8], [0]))
        ode = lambda t=None, y=None: F_windmi(t, y, params)

    elif 'simpqcf' == flowName:
        ## Simplest quadratic chaotic flow
        # Sprott Autonomous Dissipative Flows
        if nargin < 2 or isempty(N):
            N = 1000
        if nargin < 3 or isempty(L):
            L = round(N / 2)
        if nargin < 4 or isempty(s0):
            s0 = matlabarray(cat([- 0.9], [0], [0.5]))
        ode = lambda t=None, y=None: F_simpqcf(t, y, params)

    elif 'simpccf' == flowName:
        ## Simplest cubic chaotic flow
        # Sprott Autonomous Dissipative Flows
        if nargin < 2 or isempty(N):
            N = 1000
        if nargin < 3 or isempty(L):
            L = round(N / 2)
        if nargin < 4 or isempty(s0):
            s0 = matlabarray(cat([0], [0.96], [0]))
        ode = lambda t=None, y=None: F_simpccf(t, y, params)


    elif 'simpplcf' == flowName:
        ## Simplest piecewise linear chaotic flow
        # Sprott Autonomous Dissipative Flows
        if nargin < 2 or isempty(N):
            N = 1000
        if nargin < 3 or isempty(L):
            L = round(N / 2)
        if nargin < 4 or isempty(s0):
            s0 = matlabarray(cat([0], [- 0.7], [0]))
        ode = lambda t=None, y=None: F_simpplcf(t, y, params)

    elif 'DoubleScroll' == flowName:
        ## Double scroll
        # Sprott Autonomous Dissipative Flows
        if nargin < 2 or isempty(N):
            N = 1000
        if nargin < 3 or isempty(L):
            L = round(N / 2)
        if nargin < 4 or isempty(s0):
            s0 = matlabarray(cat([0.01], [0.01], [0]))
        ode = lambda t=None, y=None: F_dblscroll(t, y, params)

    ### Sprott's Conservative Flows
    elif 'DrivenPend' == flowName:
        ## Driven Pendulum
        # Sprott's Conservative Flows
        if nargin < 2 or isempty(N):
            N = 1000
        if nargin < 3 or isempty(L):
            L = round(N / 2)
        if nargin < 4 or isempty(s0):
            s0 = matlabarray(cat([0], [0]))
        ode = lambda t=None, y=None: F_drivenpend(t, y, params)

    elif 'simpdcf' == flowName:
        ## Simplest Driven Chaotic Flow
        # Sprott's Conservative Flows
        if nargin < 2 or isempty(N):
            N = 1000
        if nargin < 3 or isempty(L):
            L = copy(N)
        if nargin < 4 or isempty(s0):
            s0 = matlabarray(cat([0], [0]))
        ode = lambda t=None, y=None: F_simpdcf(t, y, params)

    elif 'nosehoover' == flowName:
        ## Nose-Hoover Oscillator
        # Sprott's Conservative Flows
        if nargin < 2 or isempty(N):
            N = 1000
        if nargin < 3 or isempty(L):
            L = copy(N)
        if nargin < 4 or isempty(s0):
            s0 = matlabarray(cat([0], [5], [0]))
        ode = lambda t=None, y=None: F_nosehoover(t, y, params)

    elif 'labyrinth' == flowName:
        ## Labyrinth Chaos
        # Sprott's Conservative Flows
        if nargin < 2 or isempty(N):
            N = 1000
        if nargin < 3 or isempty(L):
            L = dot(N, 2)
        if nargin < 4 or isempty(s0):
            s0 = matlabarray(cat([0.1], [0], [0]))
        # (No parameters)
        ode = lambda t=None, y=None: F_labyrinth(t, y)

    elif 'henonheiles' == flowName:  ## Henon-Heiles System
        # Sprott's Conservative Flows
        if nargin < 2 or isempty(N):
            N = 1000
        if nargin < 3 or isempty(L):
            L = round(N / 2)
        if nargin < 4 or isempty(s0):
            s0 = matlabarray(cat([0.499], [0], [0], [0.03160676]))
        # (No parameters)
        ode = lambda t=None, y=None: F_henonheiles(t, y)

    ### Sprott's Dissipative Flows
    elif 'DPend' == flowName:  ## Damped driven pendulum
        # Sprott's dissipative flows
        if nargin < 2 or isempty(N):
            N = 1000
        if nargin < 3 or isempty(L):
            L = round(N / 2)
        if nargin < 4 or isempty(s0):
            s0 = matlabarray(cat([0.1], [0.1]))
        ode = lambda t=None, y=None: F_DPend(t, y, params)

    elif 'DvdP' == flowName:  ## Driven van der Pol oscillator
    # Sprott's dissipative flows
        if nargin < 2 or isempty(N):
            N = 1000
        if nargin < 3 or isempty(L):
            L = round(N / 2)
        if nargin < 4 or isempty(s0):
            s0 = matlabarray(cat([- 1.9], [0.2]))
        ode = lambda t=None, y=None: F_DvdP(t, y, params)

    elif 'ShawvdP' == flowName:  ## Shaw-van der Pol
        # Sprott's dissipative flows
        if nargin < 2 or isempty(N):
            N = 1000
        if nargin < 3 or isempty(L):
            L = round(N / 2)
        if nargin < 4 or isempty(s0):
            s0 = matlabarray(cat([1.3], [0.1]))
        ode = lambda t=None, y=None: F_ShawvdP(t, y, params)

    elif 'FBruss' == flowName:  ## Forced Brusselator
        # Sprott's dissipative flows
        if nargin < 2 or isempty(N):
            N = 1000
        if nargin < 3 or isempty(L):
            L = round(N / 2)
        if nargin < 4 or isempty(s0):
            s0 = matlabarray(cat([0.3], [2]))
        ode = lambda t=None, y=None: F_FBruss(t, y, params)

    elif 'Ueda' == flowName:  ## Ueda Oscillator
        # Sprott's dissipative flows
        if nargin < 2 or isempty(N):
            N = 1000
        if nargin < 3 or isempty(L):
            L = round(N / 2)
        if nargin < 4 or isempty(s0):
            s0 = matlabarray(cat([2.5], [0]))
        ode = lambda t=None, y=None: F_ueda(t, y, params)

    elif 'Dufftwowell' == flowName:  ## Duffing two-well oscillator
        # Sprott's dissipative flows
        if nargin < 2 or isempty(N):
            N = 2000
        if nargin < 3 or isempty(L):
            L = round(N / 2)
        if nargin < 4 or isempty(s0):
            s0 = matlabarray(cat([0.2], [0]))
        ode = lambda t=None, y=None: F_Dufftwowell(t, y, params)

    elif 'Duffvdp' == flowName:  ## Duffing van der Pol oscillator
        # Sprott's dissipative flows
        if nargin < 2 or isempty(N):
            N = 2000
        if nargin < 3 or isempty(L):
            L = round(N / 2)
        if nargin < 4 or isempty(s0):
            s0 = matlabarray(cat([0.2], [- 2]))
        ode = lambda t=None, y=None: F_duffvdp(t, y, params)

    elif 'Rayduff' == flowName:  ## Rayleigh-Duffing oscillator
        # Sprott's dissipative flows
        if nargin < 2 or isempty(N):
            N = 2000
        if nargin < 3 or isempty(L):
            L = round(N / 2)
        if nargin < 4 or isempty(s0):
            s0 = matlabarray(cat([0.3], [0]))
        ode = lambda t=None, y=None: F_rayduff(t, y, params)

    ### Sprott's Simple Jerk Systems
    elif 'JD1' == flowName:  ## Sprott Jerk 1
        if nargin < 2 or isempty(N):
            N = 2000
        if nargin < 3 or isempty(L):
            L = round(N / 2)
        if nargin < 4 or isempty(s0):
            s0 = matlabarray(cat([0.1], [0], [0]))
        ode = lambda t=None, y=None: F_sprottJD1(t, y, params)

    elif 'JD2' == flowName:  ## Sprott Jerk 2
        if nargin < 2 or isempty(N):
            N = 2000
        if nargin < 3 or isempty(L):
            L = round(N / 2)
        if nargin < 4 or isempty(s0):
            s0 = matlabarray(cat([0.1], [0], [0]))
        ode = lambda t=None, y=None: F_sprottJD2(t, y, params)

    elif 'JD3' == flowName:  ## Sprott Jerk 3
        if nargin < 2 or isempty(N):
            N = 2000
        if nargin < 3 or isempty(L):
            L = round(N / 2)
        if nargin < 4 or isempty(s0):
            s0 = matlabarray(cat([0.1], [0], [0]))
        ode = lambda t=None, y=None: F_sprottJD3(t, y, params)

    elif 'JD4' == flowName:  ## Sprott Jerk 4
        if nargin < 2 or isempty(N):
            N = 2000
        if nargin < 3 or isempty(L):
            L = round(N / 2)
        if nargin < 4 or isempty(s0):
            s0 = matlabarray(cat([0.1], [0], [0]))
        ode = lambda t=None, y=None: F_sprottJD4(t, y, params)

    elif 'JD5' == flowName:  ## Sprott Jerk 5
        if nargin < 2 or isempty(N):
            N = 2000
        if nargin < 3 or isempty(L):
            L = round(N / 2)
        if nargin < 4 or isempty(s0):
            s0 = matlabarray(cat([0.1], [0], [0]))
        ode = lambda t=None, y=None: F_sprottJD5(t, y, params)

    elif 'JD6' == flowName:  ## Sprott Jerk 6
        if nargin < 2 or isempty(N):
            N = 2000
        if nargin < 3 or isempty(L):
            L = round(N / 2)
        if nargin < 4 or isempty(s0):
            s0 = matlabarray(cat([0.1], [0], [0]))
        ode = lambda t=None, y=None: F_sprottJD6(t, y, params)

    elif 'JD7' == flowName:  ## Sprott Jerk 7
        if nargin < 2 or isempty(N):
            N = 2000
        if nargin < 3 or isempty(L):
            L = round(N / 2)
        if nargin < 4 or isempty(s0):
            s0 = matlabarray(cat([0.1], [0], [0]))
        ode = lambda t=None, y=None: F_sprottJD7(t, y, params)

    ### Sprott's 3D Chaotic FLOWS
    # Table 4.1
    # All basically parameterless
    elif '3dcf_A' == flowName:  ## Sprott 3D chaotic flow A
        if nargin < 2 or isempty(N):
            N = 2000
        if nargin < 3 or isempty(L):
            L = round(N / 2)
        if nargin < 4 or isempty(s0):
            s0 = matlabarray(cat([0.05], [0.05], [0.05]))
        ode = lambda t=None, y=None: F_Sprott3dcf_A(t, y)

    elif '3dcf_B' == flowName:  ## Sprott 3D chaotic flow B
        if nargin < 2 or isempty(N):
            N = 2000
        if nargin < 3 or isempty(L):
            L = round(N / 2)
        if nargin < 4 or isempty(s0):
            s0 = matlabarray(
                cat([0.05], [0.05], [0.05]))
        ode = lambda t=None, y=None: F_Sprott3dcf_B(t, y)

    elif '3dcf_C' == flowName:  ## Sprott 3D chaotic flow C
        if nargin < 2 or isempty(N):
            N = 2000
        if nargin < 3 or isempty(L):
            L = round(N / 2)
        if nargin < 4 or isempty(s0):
            s0 = matlabarray(
                cat([0.05], [0.05], [0.05]))
        ode = lambda t=None, y=None: F_Sprott3dcf_C(t, y)

    elif '3dcf_D' == flowName:  ## Sprott 3D chaotic flow D
        if nargin < 2 or isempty(N):
            N = 2000
        if nargin < 3 or isempty(L):
            L = round(N / 2)
        if nargin < 4 or isempty(s0):
            s0 = matlabarray(
                cat([0.05], [0.05], [0.05]))
        ode = lambda t=None, y=None: F_Sprott3dcf_D(t, y)

    elif '3dcf_E' == flowName:  ## Sprott 3D chaotic flow E
        if nargin < 2 or isempty(N):
            N = 2000
        if nargin < 3 or isempty(L):
            L = round(N / 2)
        if nargin < 4 or isempty(s0):
            s0 = matlabarray(
                cat([0.05], [0.05], [0.05]))
        ode = lambda t=None, y=None: F_Sprott3dcf_E(t, y)

    elif '3dcf_F' == flowName:  ## Sprott 3D chaotic flow F
        if nargin < 2 or isempty(N):
            N = 2000
        if nargin < 3 or isempty(L):
            L = round(N / 2)
        if nargin < 4 or isempty(s0):
            s0 = matlabarray(
                cat([0.05], [0.05],
                    [0.05]))
        ode = lambda t=None, y=None: F_Sprott3dcf_F(t, y)

    elif '3dcf_G' == flowName:  ## Sprott 3D chaotic flow G
        if nargin < 2 or isempty(N):
            N = 2000
        if nargin < 3 or isempty(L):
            L = round(N / 2)
        if nargin < 4 or isempty(
                s0):
            s0 = matlabarray(
                cat([0.05], [0.05],
                    [0.05]))
        ode = lambda t=None, y=None: F_Sprott3dcf_G(t, y)

    elif '3dcf_H' == flowName:  ## Sprott 3D chaotic flow H
        if nargin < 2 or isempty(N):
            N = 2000
        if nargin < 3 or isempty(L):
            L = round(N / 2)
        if nargin < 4 or isempty(s0):
            s0 = matlabarray(
                cat([0.05],[0.05],[0.05]))
        ode = lambda t=None,y=None: F_Sprott3dcf_H(t, y)

    elif '3dcf_I' == flowName:  ## Sprott 3D chaotic flow I
        if nargin < 2 or isempty(N):
            N = 2000
        if nargin < 3 or isempty(L):
            L = round(N / 2)
        if nargin < 4 or isempty(s0):
            s0 = matlabarray(
                cat([0.05],[0.05],[0.05]))
        ode = lambda t=None, y=None: F_Sprott3dcf_I(t, y)

    elif '3dcf_J' == flowName:  ## Sprott 3D chaotic flow J
        if nargin < 2 or isempty(N):
            N = 2000
        if nargin < 3 or isempty(L):
            L = round(
                N / 2)
        if nargin < 4 or isempty(s0):
            s0 = matlabarray(cat([ 0.05], [0.05], [0.05]))
        ode = lambda t=None, y=None: F_Sprott3dcf_J(t, y)

    elif '3dcf_K' == flowName:  ## Sprott 3D chaotic flow K
        if nargin < 2 or isempty(N):
            N = 2000
        if nargin < 3 or isempty(L):
            L = round( N / 2)
        if nargin < 4 or isempty(s0):
            s0 = matlabarray(cat([0.05], [0.05], [0.05]))
        ode = lambda  t=None, y=None: F_Sprott3dcf_K(t, y)

    elif '3dcf_L' == flowName:  ## Sprott 3D chaotic flow L
        if nargin < 2 or isempty(N):
            N = 2000
        if nargin < 3 or isempty(L):
            L = round(N / 2)
        if nargin < 4 or isempty(s0):
            s0 = matlabarray(cat([0.05],[10],[-4]))
        ode = lambda t=None, y=None: F_Sprott3dcf_L(t,y)

    elif '3dcf_M' == flowName:  ## Sprott 3D chaotic flow M
        if nargin < 2 or isempty(N):
            N = 2000
        if nargin < 3 or isempty(L):
            L = round(N / 2)
        if nargin < 4 or isempty(s0):
            s0 = matlabarray(cat([0.05], [0.05], [0.05]))
        ode = lambda t=None, y=None: F_Sprott3dcf_M(t,y)

    elif '3dcf_N' == flowName:  ## Sprott 3D chaotic flow N
        if nargin < 2 or isempty(N):
            N = 2000
        if nargin < 3 or isempty(L):
            L = round(N / 2)
        if nargin < 4 or isempty(s0):
            s0 = matlabarray(cat([0.05],[0.05],[0.05]))
        ode = lambda t=None, y=None: F_Sprott3dcf_N(t,y)

    elif '3dcf_O' == flowName:  ## Sprott 3D chaotic flow O
        if nargin < 2 or isempty(N):
            N = 2000
        if nargin < 3 or isempty(L):
            L = round(N / 2)
        if nargin < 4 or isempty(s0):
            s0 = matlabarray(cat([0.05],[0.05], [0.05]))
        ode = lambda t=None,y=None: F_Sprott3dcf_O(t,y)

    elif '3dcf_P' == flowName:  ## Sprott 3D chaotic flow P
        if nargin < 2 or isempty(
                N):
            N = 2000
        if nargin < 3 or isempty(
                L):
            L = round(
                N / 2)
        if nargin < 4 or isempty(
                s0):
            ss0 = matlabarray(cat([0.05], [0.05], [0.05]))
        ode = lambda t=None, y=None: F_Sprott3dcf_P(t, y)

    elif '3dcf_Q' == flowName:  ## Sprott 3D chaotic flow Q
        if nargin < 2 or isempty(N):
            N = 2000
        if nargin < 3 or isempty(L):
            L = round(N / 2)
        if nargin < 4 or isempty(s0):
            ss0 = matlabarray(cat([0.05], [0.05], [0.05]))
        ode = lambda t=None, y=None: F_Sprott3dcf_Q(t, y)

    elif '3dcf_R' == flowName:  ## Sprott 3D chaotic flow R
        if nargin < 2 or isempty(N):
            N = 2000
        if nargin < 3 or isempty(L):
            L = round(N / 2)
        if nargin < 4 or isempty(s0):
            ss0 = matlabarray(cat([0.05], [0.05], [0.05]))
        ode = lambda t=None, y=None: F_Sprott3dcf_R(t, y)

    elif '3dcf_S' == flowName:  ## Sprott 3D chaotic flow S
        if nargin < 2 or isempty(N):
            N = 2000
        if nargin < 3 or isempty(L):
            L = round(N / 2)
        if nargin < 4 or isempty(s0):
            ss0 = matlabarray(cat([0.05], [0.05], [0.05]))
        ode = lambda t=None, y=None: F_Sprott3dcf_S(t,y)

    else:
        disp(cat(flowName,' has no matches'))

    return s  # Specify the time span


    tspan = matlabarray(cat(1, L + eta))  # Solve
    disp(cat('Solving ', flowName, ' ..........'))
    tic
    sol = ode45(ode, tspan, s0, opts)
    disp(cat('Solving ', flowName, ' took ', benrighttime(toc)))
    # Evaluate solution on a discrete grid of points, eliminating the transient
    t = linspace(1 + eta, L + eta, N)
    s = deval(sol, t).T
    # Ensure a column vector
    if size(s, 2) > size(s, 1):
        s = s.T

    return s

if __name__ == '__main__':
    pass
