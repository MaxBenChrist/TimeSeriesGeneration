# Autogenerated with SMOP 0.32-7-gcce8558
from smop.core import *
# MkSg_noise.m

    
@function
def MkSg_Noise(whatDistribution=None,N=None,params=None,*args,**kwargs):
    varargin = MkSg_Noise.varargin
    nargin = MkSg_Noise.nargin

    # returns a noisy time series
# Length N
# Sampled from a given distribution whatDistribution
# with defining parameters params
#-------------------------------------------------------------------------------
    
    if nargin < 1 or isempty(whatDistribution):
        whatDistribution='uniform'
    
    if nargin < 2 or isempty(N):
        N=1000
    
    # Part of the Make_Signal package
# Ben Fulcher 8/3/2010
    
    if 'uniform' == whatDistribution:
        s=rand(N,1)
    else:
        if 'normal' == whatDistribution:
            s=randn(N,1)
        else:
            if 'beta' == whatDistribution:
                # Uses the MATLAB Statistics Toolbox
		# params specifies a two-component vector [a,b]
                if nargin < 3 or isempty(params):
                    params=matlabarray(cat(1,1))
                a=params[1]
                b=params[2]
                s=betarnd(a,b,N,1)
            else:
                if 'exp' == whatDistribution:
                    # Uses the MATLAB Statistics Toolbox
		# params specifies the mean parameter mu
                    if nargin < 3 or isempty(params):
                        params=1
                    mu=copy(params)
                    s=exprnd(mu,N,1)
                else:
                    if 'gamma' == whatDistribution:
                        # Uses the MATLAB Statistics Toolbox
		# params specifies the gamma distribution parameters [a,b]
                        if nargin < 3 or isempty(params):
                            params=matlabarray(cat(1,5))
                        a=params[1]
                        b=params[2]
                        s=gamrnd(a,b,N,1)
                    else:
                        if 'geo' == whatDistribution:
                            # Uses the MATLAB Statistics Toolbox
		# params specifies the probability parameter p
                            if nargin < 3 or isempty(params):
                                params=0.5
                            p=copy(params)
                            s=geornd(p,N,1)
                        else:
                            disp('Invalid distribution specified')
                            s=copy(NaN)
    
    return s
    
if __name__ == '__main__':
    pass
    